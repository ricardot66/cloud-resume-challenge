---
name: AWS Production Deployment (VCS-Driven)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
  TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}

jobs:
  security-scan:
    name: Security & Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov (Infrastructure Security)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/aws/terraform
          framework: terraform
          config_file: .checkov.yml
        continue-on-error: true

      - name: Python Security Scan
        working-directory: backend/lambda
        run: |
          pip install bandit safety
          mkdir -p ../../reports
          bandit -r . -f json -o ../../reports/bandit-report.json || true
          safety check --json --output ../../reports/safety-report.json || true

      - name: Frontend Security Scan
        working-directory: frontend
        run: |
          echo "Scanning for security issues..."
          if grep -r -i "api[_-]key\|secret\|password\|token" --include="*.html" --include="*.js" --include="*.css" . 2>/dev/null; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found!"
            exit 1
          fi
          echo "‚úÖ Frontend security scan passed"

  testing-suite:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Backend Unit Tests
        working-directory: backend/lambda
        run: |
          pip install pytest boto3 moto requests
          cat > test_visitor_counter.py << 'EOF'
          import json
          import pytest
          from unittest.mock import MagicMock

          def mock_lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'headers': {'Access-Control-Allow-Origin': '*'},
                  'body': json.dumps({'count': 42, 'message': 'Success'})
              }

          def test_lambda_handler_response_format():
              event = {}
              context = MagicMock()
              response = mock_lambda_handler(event, context)
              assert 'statusCode' in response
              assert 'headers' in response
              assert 'body' in response
              assert response['statusCode'] == 200

          def test_cors_headers():
              event = {}
              context = MagicMock()
              response = mock_lambda_handler(event, context)
              assert 'Access-Control-Allow-Origin' in response['headers']
          EOF
          python -m pytest test_visitor_counter.py -v

      - name: Create Lambda Package for Terraform
        working-directory: backend/lambda
        run: |
          echo "üì¶ Creating Lambda deployment package for Terraform..."
          
          cat > lambda_function.py << 'EOF'
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              cors_headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
              }
              
              if event.get('httpMethod') == 'OPTIONS':
                  return {'statusCode': 200, 'headers': cors_headers, 'body': ''}
              
              try:
                  dynamodb = boto3.resource('dynamodb')
                  table = dynamodb.Table(os.environ.get('DYNAMODB_TABLE', 'cloud-resume-dev-visitor-count'))
                  
                  response = table.get_item(Key={'id': 'visitor_count'})
                  current_count = int(response.get('Item', {}).get('count', 0))
                  new_count = current_count + 1
                  
                  table.put_item(Item={'id': 'visitor_count', 'count': new_count})
                  
                  return {
                      'statusCode': 200,
                      'headers': cors_headers,
                      'body': json.dumps({'count': new_count, 'message': 'Success'})
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': cors_headers,
                      'body': json.dumps({'error': str(e), 'message': 'Failed'})
                  }
          EOF
          
          if [ ! -f requirements.txt ]; then
            echo "boto3>=1.26.0" > requirements.txt
          fi
          
          pip install -r requirements.txt -t .
          zip -r ../../infrastructure/aws/terraform/lambda.zip . -x "*.pyc" "__pycache__/*" "test_*"
          
          echo "‚úÖ Lambda package created for Terraform"

      - name: Frontend Validation
        working-directory: frontend
        run: |
          if ! ls *.html 2>/dev/null; then
            echo "üìù No HTML files found - applications will create professional resume"
          fi
          echo "‚úÖ Frontend validation completed"

  trigger-terraform:
    name: Trigger Infrastructure (VCS)
    runs-on: ubuntu-latest
    needs: [security-scan, testing-suite]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    outputs:
      terraform_triggered: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform (for validation only)
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Validate Terraform Configuration
        working-directory: infrastructure/aws/terraform
        run: |
          terraform init
          terraform validate
          echo "‚úÖ Terraform configuration is valid"

      - name: Trigger Terraform Cloud VCS Apply
        run: |
          echo "üöÄ Infrastructure deployment triggered via VCS workflow"
          echo "This push to main branch triggers Terraform Cloud auto-apply"
          echo "üìä Monitor progress at: https://app.terraform.io/app/ricardo-cloud-resume/workspaces/aws-resume-infrastructure"
          echo "‚è≥ Waiting period: 6-8 minutes for infrastructure deployment"

  wait-for-infrastructure:
    name: Wait for Infrastructure Deployment
    runs-on: ubuntu-latest
    needs: trigger-terraform
    
    outputs:
      website_url: ${{ steps.get_outputs.outputs.website_url }}
      api_url: ${{ steps.get_outputs.outputs.api_url }}
      s3_bucket: ${{ steps.get_outputs.outputs.s3_bucket }}
      cloudfront_id: ${{ steps.get_outputs.outputs.cloudfront_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Wait for Terraform Cloud Auto-Apply
        run: |
          echo "‚è≥ Waiting for Terraform Cloud VCS auto-apply to complete..."
          echo "This includes:"
          echo "  - Terraform plan generation (1-2 min)"
          echo "  - Auto-apply execution (4-6 min)"
          echo "  - Output generation (30 sec)"
          echo ""
          echo "Total wait time: 6-8 minutes"
          
          # Wait 6 minutes for Terraform Cloud to complete
          for i in {1..6}; do
            echo "‚è∞ Waiting... $i/6 minutes elapsed"
            sleep 60
          done
          
          echo "‚úÖ Wait period completed"

      - name: Get Infrastructure Outputs with Retry
        id: get_outputs
        working-directory: infrastructure/aws/terraform
        run: |
          terraform init
          
          echo "üîç Attempting to retrieve Terraform outputs with retry logic..."
          
          max_attempts=15
          attempt=1
          success=false
          
          while [ $attempt -le $max_attempts ] && [ "$success" = "false" ]; do
            echo "üîÑ Attempt $attempt of $max_attempts..."
            
            # Try to get outputs
            if terraform refresh && terraform output > /dev/null 2>&1; then
              S3_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
              WEBSITE_URL=$(terraform output -raw website_url 2>/dev/null || echo "")
              API_URL=$(terraform output -raw api_url 2>/dev/null || echo "")
              CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
              
              # Validate outputs
              if [ ! -z "$S3_BUCKET" ] && [ "$S3_BUCKET" != "null" ] && [[ "$S3_BUCKET" == *"cloud-resume"* ]]; then
                echo "‚úÖ Successfully retrieved valid outputs:"
                echo "S3 Bucket: $S3_BUCKET"
                echo "Website URL: $WEBSITE_URL"
                echo "API URL: $API_URL"
                echo "CloudFront ID: $CLOUDFRONT_ID"
                
                # Set outputs
                echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
                echo "website_url=$WEBSITE_URL" >> $GITHUB_OUTPUT
                echo "api_url=$API_URL" >> $GITHUB_OUTPUT
                echo "cloudfront_id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
                
                success=true
                break
              else
                echo "‚è≥ Outputs not ready. S3 bucket: '$S3_BUCKET'"
              fi
            else
              echo "‚è≥ Terraform outputs not available yet"
            fi
            
            if [ "$success" = "false" ]; then
              echo "Waiting 30 seconds before retry..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
          
          if [ "$success" = "false" ]; then
            echo "‚ùå Failed to get valid outputs after $max_attempts attempts"
            echo "This usually means Terraform Cloud hasn't finished applying yet"
            
            # Show current state for debugging
            echo "üìã Current Terraform state:"
            terraform state list || echo "No state available"
            echo "üìä Available outputs:"
            terraform output || echo "No outputs available"
            
            # Set fallback values
            echo "s3_bucket=still-deploying" >> $GITHUB_OUTPUT
            echo "website_url=https://still-deploying" >> $GITHUB_OUTPUT
            echo "api_url=https://still-deploying" >> $GITHUB_OUTPUT
            echo "cloudfront_id=still-deploying" >> $GITHUB_OUTPUT
            
            echo "‚ö†Ô∏è Infrastructure may still be deploying. Check Terraform Cloud for status."
            exit 0  # Don't fail - let application deploy handle this
          fi

  application-deploy:
    name: Deploy Applications
    runs-on: ubuntu-latest
    needs: wait-for-infrastructure
    if: needs.wait-for-infrastructure.outputs.s3_bucket != 'still-deploying'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Verify Infrastructure Outputs
        run: |
          echo "üîç Infrastructure outputs received:"
          echo "S3 Bucket: ${{ needs.wait-for-infrastructure.outputs.s3_bucket }}"
          echo "Website URL: ${{ needs.wait-for-infrastructure.outputs.website_url }}"
          echo "API URL: ${{ needs.wait-for-infrastructure.outputs.api_url }}"
          echo "CloudFront ID: ${{ needs.wait-for-infrastructure.outputs.cloudfront_id }}"

      - name: Deploy Professional Resume Frontend
        working-directory: frontend
        run: |
          S3_BUCKET="${{ needs.wait-for-infrastructure.outputs.s3_bucket }}"
          API_URL="${{ needs.wait-for-infrastructure.outputs.api_url }}"
          
          echo "üéØ Deploying to S3 bucket: $S3_BUCKET"
          echo "üîó API endpoint: $API_URL"
          
          # Create professional resume
          cat > index.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Ricardo Torres - Technical Program Manager III</title>
              <style>
                  body { 
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                      line-height: 1.6; 
                      margin: 0; 
                      padding: 20px; 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                  }
                  .container { 
                      max-width: 900px; 
                      margin: 0 auto; 
                      background: white; 
                      border-radius: 20px; 
                      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                      overflow: hidden;
                  }
                  .header { 
                      background: linear-gradient(45deg, #2c3e50, #3498db); 
                      color: white; 
                      padding: 40px; 
                      text-align: center; 
                  }
                  .header h1 { 
                      font-size: 3em; 
                      margin-bottom: 10px; 
                      text-shadow: 2px 2px 4px rgba(0,0,0,0.3); 
                  }
                  .visitor-counter { 
                      text-align: center; 
                      margin: 30px; 
                      padding: 30px; 
                      background: linear-gradient(45deg, #f8f9fa, #e9ecef); 
                      border-radius: 15px; 
                      border: 3px solid #3498db; 
                  }
                  .visitor-number { 
                      font-size: 3em; 
                      font-weight: bold; 
                      color: #3498db; 
                  }
                  .content { 
                      padding: 40px; 
                  }
                  .section { 
                      margin: 30px 0; 
                  }
                  .section h2 { 
                      color: #2c3e50; 
                      border-bottom: 3px solid #3498db; 
                      padding-bottom: 10px; 
                  }
                  .experience { 
                      background: #f8f9fa; 
                      padding: 20px; 
                      margin: 15px 0; 
                      border-radius: 10px; 
                      border-left: 5px solid #e74c3c; 
                  }
                  .company { 
                      font-weight: bold; 
                      color: #e74c3c; 
                      font-size: 1.2em; 
                  }
                  .skills { 
                      display: flex; 
                      flex-wrap: wrap; 
                      gap: 10px; 
                  }
                  .skill { 
                      background: #3498db; 
                      color: white; 
                      padding: 8px 15px; 
                      border-radius: 20px; 
                      font-size: 14px; 
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <header class="header">
                      <h1>Ricardo Torres</h1>
                      <div style="font-size: 1.3em;">Technical Program Manager III</div>
                      <div style="margin-top: 20px;">
                          üìß ricardot66@gmail.com | üì± +52 5541935541 | üåê ricardot.com
                      </div>
                  </header>
                  
                  <div class="visitor-counter">
                      <div>üë• Portfolio Visitors</div>
                      <div class="visitor-number" id="visitor-count">Loading...</div>
                      <div style="font-size: 0.9em; color: #666; margin-top: 10px;">
                          Real-time analytics powered by AWS serverless architecture
                      </div>
                  </div>
                  
                  <div class="content">
                      <div class="section">
                          <h2>üéØ Executive Summary</h2>
                          <p>Technical Program Manager with <strong>9+ years</strong> of experience leading cross-functional, data-driven initiatives across global markets. Expert in cloud platforms (AWS, GCP, Azure), automation, and scalable system design.</p>
                      </div>
                      
                      <div class="section">
                          <h2>üíº Experience</h2>
                          
                          <div class="experience">
                              <div class="company">British American Tobacco (BAT)</div>
                              <div><strong>Commercial Analytics Manager</strong> | April 2021 - Present</div>
                              <ul>
                                  <li>Led cross-functional technical programs across 4 global markets</li>
                                  <li>Managed ¬£1M+ technical initiatives with stakeholder alignment</li>
                                  <li>Designed automation tools reducing manual operations by 60%</li>
                              </ul>
                          </div>
                          
                          <div class="experience">
                              <div class="company">Amazon</div>
                              <div><strong>Program Manager - Sales Data Science</strong> | April 2019 - July 2020</div>
                              <ul>
                                  <li>Managed BI database systems for Amazon Marketplace</li>
                                  <li>Led automation initiatives improving efficiency by 35%</li>
                                  <li>SME for competitive intelligence systems</li>
                              </ul>
                          </div>
                      </div>
                      
                      <div class="section">
                          <h2>üöÄ Technical Skills</h2>
                          <div class="skills">
                              <span class="skill">AWS</span>
                              <span class="skill">Google Cloud</span>
                              <span class="skill">Python</span>
                              <span class="skill">Terraform</span>
                              <span class="skill">CI/CD</span>
                              <span class="skill">Data Analytics</span>
                              <span class="skill">Program Management</span>
                          </div>
                      </div>
                  </div>
              </div>
              
              <script>
                  async function loadVisitorCount() {
                      try {
                          const response = await fetch('${API_URL}');
                          const data = await response.json();
                          document.getElementById('visitor-count').textContent = data.count || 'Loading...';
                      } catch (error) {
                          console.error('Error:', error);
                          document.getElementById('visitor-count').textContent = 'N/A';
                      }
                  }
                  
                  window.onload = loadVisitorCount;
                  setInterval(loadVisitorCount, 30000);
              </script>
          </body>
          </html>
          EOF
          
          # Deploy to S3
          aws s3 sync . s3://$S3_BUCKET --delete --exclude "*.git*"
          echo "‚úÖ Frontend deployed successfully"

      - name: Update Lambda Function (if needed)
        run: |
          # Get function name from S3 bucket name pattern
          FUNCTION_NAME=$(echo "${{ needs.wait-for-infrastructure.outputs.s3_bucket }}" | sed 's/-website-.*/-visitor-counter/')
          
          echo "üîÑ Checking Lambda function: $FUNCTION_NAME"
          
          if aws lambda get-function --function-name "$FUNCTION_NAME" --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "‚ÑπÔ∏è Lambda function exists and is managed by Terraform"
          else
            echo "‚ÑπÔ∏è Lambda function will be created/updated by Terraform"
          fi

      - name: Invalidate CloudFront Cache
        if: needs.wait-for-infrastructure.outputs.cloudfront_id != 'still-deploying'
        run: |
          CLOUDFRONT_ID="${{ needs.wait-for-infrastructure.outputs.cloudfront_id }}"
          if [ ! -z "$CLOUDFRONT_ID" ] && [ "$CLOUDFRONT_ID" != "null" ]; then
            echo "üîÑ Invalidating CloudFront: $CLOUDFRONT_ID"
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
            echo "‚úÖ CloudFront invalidation created"
          fi

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [wait-for-infrastructure, application-deploy]
    if: always()
    steps:
      - name: Generate Report
        run: |
          echo "## üöÄ VCS-Driven Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.wait-for-infrastructure.result }}" = "success" ]; then
            echo "‚úÖ **Infrastructure**: Auto-deployed via Terraform Cloud VCS" >> $GITHUB_STEP_SUMMARY
            echo "üåê **Website**: ${{ needs.wait-for-infrastructure.outputs.website_url }}" >> $GITHUB_STEP_SUMMARY
            echo "üîó **API**: ${{ needs.wait-for-infrastructure.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Infrastructure**: Still deploying or failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Method**: VCS-Driven with Auto-Apply" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
