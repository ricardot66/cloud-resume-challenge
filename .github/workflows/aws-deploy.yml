---
name: AWS Production Deployment (Pure VCS)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  validate-and-test:
    name: Validate & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform (validation only)
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Validation (Read-Only)
        working-directory: infrastructure/aws/terraform
        run: |
          terraform init
          terraform validate
          echo "✅ Terraform configuration is valid"

      - name: Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/aws/terraform
          framework: terraform
        continue-on-error: true

      - name: Create Lambda Package
        run: |
          echo "📦 Creating Lambda package for Terraform..."
          mkdir -p /tmp/lambda-build
          cd /tmp/lambda-build
          
          cat > lambda_function.py << 'EOF'
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              cors_headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
              }
              
              if event.get('httpMethod') == 'OPTIONS':
                  return {'statusCode': 200, 'headers': cors_headers, 'body': ''}
              
              try:
                  dynamodb = boto3.resource('dynamodb')
                  table = dynamodb.Table(os.environ.get('DYNAMODB_TABLE', 'cloud-resume-dev-visitor-count'))
                  
                  response = table.get_item(Key={'id': 'visitor_count'})
                  current_count = int(response.get('Item', {}).get('count', 0))
                  new_count = current_count + 1
                  
                  table.put_item(Item={'id': 'visitor_count', 'count': new_count})
                  
                  return {
                      'statusCode': 200,
                      'headers': cors_headers,
                      'body': json.dumps({'count': new_count, 'message': 'Success'})
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': cors_headers,
                      'body': json.dumps({'error': str(e), 'message': 'Failed'})
                  }
          EOF
          
          echo "boto3>=1.26.0" > requirements.txt
          pip install -r requirements.txt -t . --no-cache-dir --quiet
          find . -name "*.pyc" -delete 2>/dev/null || true
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          
          zip -r lambda.zip . -x "requirements.txt"
          cp lambda.zip $GITHUB_WORKSPACE/infrastructure/aws/terraform/
          echo "✅ Lambda package ready for Terraform"

  wait-for-terraform-cloud:
    name: Wait for Terraform Cloud
    runs-on: ubuntu-latest
    needs: validate-and-test
    if: github.ref == 'refs/heads/main'
    
    outputs:
      website_url: ${{ steps.get_outputs.outputs.website_url }}
      api_url: ${{ steps.get_outputs.outputs.api_url }}
      s3_bucket: ${{ steps.get_outputs.outputs.s3_bucket }}
      cloudfront_id: ${{ steps.get_outputs.outputs.cloudfront_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform (read-only)
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: VCS Trigger Information
        run: |
          echo "🚀 VCS-Driven Deployment Triggered"
          echo "This push to main branch will trigger Terraform Cloud auto-apply"
          echo "📊 Monitor at: https://app.terraform.io/app/ricardo-cloud-resume/workspaces/aws-resume-infrastructure"
          echo ""
          echo "⏳ Waiting 8 minutes for Terraform Cloud to complete:"
          echo "  - Plan generation: ~2 minutes"
          echo "  - Auto-apply execution: ~5 minutes"
          echo "  - Output generation: ~1 minute"

      - name: Wait for Terraform Cloud Auto-Apply
        run: |
          echo "⏳ Waiting for Terraform Cloud auto-apply (8 minutes)..."
          for i in {1..8}; do
            echo "⏰ Minute $i/8 - Terraform Cloud processing..."
            sleep 60
          done
          echo "✅ Wait period completed"

      - name: Get Infrastructure Outputs (Read-Only)
        id: get_outputs
        working-directory: infrastructure/aws/terraform
        run: |
          terraform init
          
          echo "🔍 Reading Terraform outputs (VCS mode - read-only)..."
          
          max_attempts=20
          attempt=1
          success=false
          
          while [ $attempt -le $max_attempts ] && [ "$success" = "false" ]; do
            echo "🔄 Attempt $attempt of $max_attempts..."
            
            # Only read outputs - no state modifications
            if terraform output > /dev/null 2>&1; then
              S3_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
              WEBSITE_URL=$(terraform output -raw website_url 2>/dev/null || echo "")
              API_URL=$(terraform output -raw api_url 2>/dev/null || echo "")
              CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
              
              # Validate we got real outputs
              if [ ! -z "$S3_BUCKET" ] && [ "$S3_BUCKET" != "null" ] && [[ "$S3_BUCKET" == *"cloud-resume"* ]]; then
                echo "✅ Successfully retrieved infrastructure outputs:"
                echo "S3 Bucket: $S3_BUCKET"
                echo "Website URL: $WEBSITE_URL"
                echo "API URL: $API_URL"
                echo "CloudFront ID: $CLOUDFRONT_ID"
                
                echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
                echo "website_url=$WEBSITE_URL" >> $GITHUB_OUTPUT
                echo "api_url=$API_URL" >> $GITHUB_OUTPUT
                echo "cloudfront_id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
                
                success=true
                break
              else
                echo "⏳ Outputs not ready yet. S3 bucket value: '$S3_BUCKET'"
              fi
            else
              echo "⏳ Terraform outputs not available (Terraform Cloud still applying)"
            fi
            
            if [ "$success" = "false" ]; then
              echo "Waiting 20 seconds before retry..."
              sleep 20
              attempt=$((attempt + 1))
            fi
          done
          
          if [ "$success" = "false" ]; then
            echo "❌ Could not retrieve outputs after $max_attempts attempts"
            echo "📋 Debug information:"
            terraform state list 2>/dev/null || echo "No state available"
            terraform output 2>/dev/null || echo "No outputs available"
            
            echo "s3_bucket=terraform-cloud-not-ready" >> $GITHUB_OUTPUT
            echo "website_url=https://terraform-cloud-not-ready" >> $GITHUB_OUTPUT
            echo "api_url=https://terraform-cloud-not-ready" >> $GITHUB_OUTPUT
            echo "cloudfront_id=not-ready" >> $GITHUB_OUTPUT
            
            echo "🔗 Check Terraform Cloud status manually"
            exit 0
          fi

  deploy-applications:
    name: Deploy Applications
    runs-on: ubuntu-latest
    needs: wait-for-terraform-cloud
    if: needs.wait-for-terraform-cloud.outputs.s3_bucket != 'terraform-cloud-not-ready'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy Professional Resume
        working-directory: frontend
        run: |
          S3_BUCKET="${{ needs.wait-for-terraform-cloud.outputs.s3_bucket }}"
          API_URL="${{ needs.wait-for-terraform-cloud.outputs.api_url }}"
          
          echo "🎯 Deploying to: $S3_BUCKET"
          echo "🔗 API endpoint: $API_URL"
          
          cat > index.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Ricardo Torres - Technical Program Manager III</title>
              <style>
                  body { 
                      font-family: 'Segoe UI', sans-serif; 
                      margin: 0; 
                      background: linear-gradient(135deg, #667eea, #764ba2);
                      min-height: 100vh; 
                      padding: 20px;
                  }
                  .container { 
                      max-width: 900px; 
                      margin: 0 auto; 
                      background: white; 
                      border-radius: 20px; 
                      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                      overflow: hidden;
                  }
                  .header { 
                      background: linear-gradient(45deg, #2c3e50, #3498db); 
                      color: white; 
                      padding: 40px; 
                      text-align: center; 
                  }
                  .header h1 { 
                      font-size: 3em; 
                      margin: 0 0 10px 0; 
                  }
                  .visitor-counter { 
                      text-align: center; 
                      margin: 30px; 
                      padding: 30px; 
                      background: #f8f9fa; 
                      border-radius: 15px; 
                      border: 3px solid #3498db; 
                  }
                  .visitor-number { 
                      font-size: 3em; 
                      font-weight: bold; 
                      color: #3498db; 
                  }
                  .content { padding: 40px; }
                  .section { margin: 30px 0; }
                  .section h2 { 
                      color: #2c3e50; 
                      border-bottom: 3px solid #3498db; 
                      padding-bottom: 10px; 
                  }
                  .experience { 
                      background: #f8f9fa; 
                      padding: 20px; 
                      margin: 15px 0; 
                      border-radius: 10px; 
                      border-left: 5px solid #e74c3c; 
                  }
                  .company { 
                      font-weight: bold; 
                      color: #e74c3c; 
                      font-size: 1.2em; 
                  }
                  .skills { 
                      display: flex; 
                      flex-wrap: wrap; 
                      gap: 10px; 
                  }
                  .skill { 
                      background: #3498db; 
                      color: white; 
                      padding: 8px 15px; 
                      border-radius: 20px; 
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <header class="header">
                      <h1>Ricardo Torres</h1>
                      <div style="font-size: 1.3em;">Technical Program Manager III</div>
                      <div style="margin-top: 20px;">
                          📧 ricardot66@gmail.com | 🌐 ricardot.com | 💼 LinkedIn
                      </div>
                  </header>
                  
                  <div class="visitor-counter">
                      <div>👥 Portfolio Visitors</div>
                      <div class="visitor-number" id="visitor-count">Loading...</div>
                      <div style="font-size: 0.9em; color: #666; margin-top: 10px;">
                          Real-time analytics • AWS serverless architecture
                      </div>
                  </div>
                  
                  <div class="content">
                      <div class="section">
                          <h2>🎯 Executive Summary</h2>
                          <p><strong>Technical Program Manager with 9+ years</strong> leading cross-functional, data-driven initiatives across global markets. Expert in cloud platforms (AWS, GCP, Azure), automation, and scalable system design.</p>
                      </div>
                      
                      <div class="section">
                          <h2>💼 Experience</h2>
                          
                          <div class="experience">
                              <div class="company">British American Tobacco (BAT)</div>
                              <div><strong>Commercial Analytics Manager</strong> | April 2021 - Present</div>
                              <ul>
                                  <li>Led cross-functional technical programs across 4 global markets (Canada, Brazil, Mexico, Chile)</li>
                                  <li>Managed £1M+ technical initiatives with stakeholder alignment</li>
                                  <li>Designed automation tools reducing manual operations by 60%</li>
                                  <li>Implemented robust monitoring ensuring 99.9% delivery performance</li>
                              </ul>
                          </div>
                          
                          <div class="experience">
                              <div class="company">Amazon</div>
                              <div><strong>Program Manager - Sales Data Science</strong> | April 2019 - July 2020</div>
                              <ul>
                                  <li>Managed BI database systems for Amazon Marketplace across Mexico and Colombia</li>
                                  <li>Led automation initiatives improving operating efficiency by 35%</li>
                                  <li>SME for competitive intelligence systems</li>
                              </ul>
                          </div>
                      </div>
                      
                      <div class="section">
                          <h2>🚀 Technical Skills</h2>
                          <div class="skills">
                              <span class="skill">AWS</span>
                              <span class="skill">Google Cloud</span>
                              <span class="skill">Python</span>
                              <span class="skill">Terraform</span>
                              <span class="skill">CI/CD</span>
                              <span class="skill">Data Analytics</span>
                              <span class="skill">Program Management</span>
                          </div>
                      </div>
                      
                      <div style="text-align: center; margin-top: 40px; padding: 20px; background: #f8f9fa; border-radius: 10px;">
                          <div><strong>Cloud Resume Challenge</strong></div>
                          <div style="font-size: 0.9em; color: #666;">
                              Serverless Architecture: Lambda • DynamoDB • CloudFront • S3 • Terraform • GitHub Actions
                          </div>
                      </div>
                  </div>
              </div>
              
              <script>
                  async function loadVisitorCount() {
                      try {
                          const response = await fetch('${API_URL}');
                          const data = await response.json();
                          document.getElementById('visitor-count').textContent = data.count || 'Loading...';
                      } catch (error) {
                          console.error('Error:', error);
                          document.getElementById('visitor-count').textContent = 'N/A';
                      }
                  }
                  
                  window.onload = loadVisitorCount;
                  setInterval(loadVisitorCount, 30000);
              </script>
          </body>
          </html>
          EOF
          
          aws s3 sync . s3://$S3_BUCKET --delete --exclude "*.git*"
          echo "✅ Resume deployed successfully"

      - name: Invalidate CloudFront
        if: needs.wait-for-terraform-cloud.outputs.cloudfront_id != 'not-ready'
        run: |
          CLOUDFRONT_ID="${{ needs.wait-for-terraform-cloud.outputs.cloudfront_id }}"
          if [ ! -z "$CLOUDFRONT_ID" ] && [ "$CLOUDFRONT_ID" != "null" ]; then
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
            echo "✅ CloudFront cache invalidated"
          fi

      - name: Test Deployment
        run: |
          echo "🧪 Testing deployment..."
          website_url="${{ needs.wait-for-terraform-cloud.outputs.website_url }}"
          api_url="${{ needs.wait-for-terraform-cloud.outputs.api_url }}"
          
          # Test website
          if curl -s "$website_url" > /dev/null; then
            echo "✅ Website accessible"
          else
            echo "⚠️ Website test failed"
          fi
          
          # Test API
          if curl -s "$api_url" > /dev/null; then
            echo "✅ API accessible"
          else
            echo "⚠️ API test failed"
          fi

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [wait-for-terraform-cloud, deploy-applications]
    if: always()
    steps:
      - name: Generate Report
        run: |
          echo "## 🚀 VCS-Driven Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Method**: Pure VCS-driven with Terraform Cloud auto-apply" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.wait-for-terraform-cloud.result }}" = "success" ]; then
            echo "✅ **Infrastructure**: Auto-deployed via Terraform Cloud" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Website**: ${{ needs.wait-for-terraform-cloud.outputs.website_url }}" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **API**: ${{ needs.wait-for-terraform-cloud.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Infrastructure**: Deployment pending or failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-applications.result }}" = "success" ]; then
            echo "✅ **Applications**: Frontend and backend deployed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Applications**: Deployment skipped or failed" >> $GITHUB_STEP_SUMMARY
          fi
